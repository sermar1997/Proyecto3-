/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Conexión.Conexion;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 * Clase que lista todos los vehículos
 *
 * @author Sergio Marco
 * @version 23/05/2017
 */
public class VentanaListadoVehiculos extends javax.swing.JFrame implements ListSelectionListener {

    Conexion conn;
    DefaultTableModel modelo;
    Object columna;

    /**
     * Creates new form VentanaMuestraListadoVehiculos
     *
     * @param conn parámetro que pasa la conexión
     */
    public VentanaListadoVehiculos(Conexion conn) {
        this.conn = conn;
        setIconImage(new ImageIcon(getClass().getResource("..\\Imagenes\\icono.jpg")).getImage());
        initComponents();
        //Obtenemos el modelo de la tabla
        modelo = (DefaultTableModel) Tabla.getModel();
        //Rellenamos la tabla
        rellenaTabla();
        //Asignamos un listener para que cuando no haya nada seleccionado el botón esté dehabilitado
        ListSelectionModel modeloSeleccion = Tabla.getSelectionModel();
        modeloSeleccion.addListSelectionListener(this);
        BasigPropVe.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        BasigPropVe = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        BasigPropVe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/persona.jpg"))); // NOI18N
        BasigPropVe.setText("Asignar propietario a vehículo");
        BasigPropVe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BasigPropVeActionPerformed(evt);
            }
        });

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Matrícula", "Modelo", "Año", "Propietario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Tabla);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/logo.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(307, 307, 307)
                        .addComponent(BasigPropVe, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(284, 284, 284)
                        .addComponent(jLabel1)))
                .addContainerGap(372, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BasigPropVe)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
     * Al pulsar el botón llamaremos a otra ventana a la que le pasaremos la
     * matrícula para realizar el cambio de propietario
     *
     * @param evt parámetro que llama al evento que llama a la otra ventana
     */
    private void BasigPropVeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BasigPropVeActionPerformed
        //Guardamos la fila seleccionada
        int fila = Tabla.getSelectedRow();
        //Guardamos la columna de la fila que habíamos guardado anteriormente
        String matricula = (String) Tabla.getValueAt(fila, 0);
        //Le pasamos por parámetro la conexión y la matrícula.
        VentanaAsignaPropietario v = new VentanaAsignaPropietario(conn, matricula, Tabla);
        v.setVisible(true);
        dispose();
    }//GEN-LAST:event_BasigPropVeActionPerformed
    /**
     * Método que rellena la tabla
     */
    private void rellenaTabla() {
        try {
            //Ejecuta la consulta
            ResultSet rs = conn.consultaSinParametros("SELECT V.MATRICULA, V.MODELO, V.ANIO, concat_ws(' ',P.NOMBRE,P.APELLIDO)"
                    + "FROM VEHICULO V JOIN PROPIETARIO P ON(V.PROPIETARIO = P.DNI)ORDER BY V.ANIO DESC");
            //Mientras haya datos añadirá filas a la tabla
            while (rs.next()) {
                modelo.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4)});
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Método que refresca los datos de la tabla
     *
     * @param tabla parámetro que indica la tabla que va a modificar
     */
    public void RefrescarTabla(JTable tabla) {
        for (int i = 0; i < Tabla.getRowCount(); i++) {
            modelo.removeRow(i);
            i -= 1;
        }
        rellenaTabla();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BasigPropVe;
    private javax.swing.JTable Tabla;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
/**
     * Método que habilita o deshabilita el botón en función de si hay algo
     * seleccionado o no.
     *
     * @param e parámetro que llama al ListSelectionevent
     */
    @Override
    public void valueChanged(ListSelectionEvent e) {
        //Guardamos la fila
        int fila = Tabla.getSelectedRowCount();
        //Si no hay alguna seleccionada deshabilitamos el botón
        if (fila == 0) {
            BasigPropVe.setEnabled(false);
        } else {
            //Si hay alguna seleccionada, habilitamos el botón
            BasigPropVe.setEnabled(true);
        }
    }
}
